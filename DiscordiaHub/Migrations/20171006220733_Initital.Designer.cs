// <auto-generated />
using DiscordiaHub.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DiscordiaHub.Migrations
{
    [DbContext(typeof(HubContext))]
    [Migration("20171006220733_Initital")]
    partial class Initital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("DiscordiaHub.Management.Models.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("BannedById")
                        .HasColumnName("banned_by_id");

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnName("cid")
                        .HasMaxLength(255);

                    b.Property<int>("Duration")
                        .HasColumnName("duration");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnName("expiration_time");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnName("ip")
                        .HasMaxLength(255);

                    b.Property<string>("Job")
                        .HasColumnName("job")
                        .HasMaxLength(255);

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason")
                        .HasMaxLength(255);

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnName("server")
                        .HasMaxLength(255);

                    b.Property<int?>("TargetId")
                        .HasColumnName("target_id");

                    b.Property<DateTime>("Time")
                        .HasColumnName("time");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(255);

                    b.Property<bool?>("Unbanned")
                        .HasColumnName("unbanned");

                    b.Property<int?>("UnbannedById")
                        .HasColumnName("unbanned_by_id");

                    b.Property<DateTime?>("UnbannedTime")
                        .HasColumnName("unbanned_time");

                    b.HasKey("Id")
                        .HasName("pk_bans");

                    b.HasIndex("BannedById")
                        .HasName("ix_bans_banned_by_id");

                    b.HasIndex("TargetId")
                        .HasName("ix_bans_target_id");

                    b.HasIndex("UnbannedById")
                        .HasName("ix_bans_unbanned_by_id");

                    b.ToTable("bans");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .HasColumnName("author")
                        .HasMaxLength(255);

                    b.Property<int?>("AuthorId")
                        .HasColumnName("author_id");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasMaxLength(255);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("AuthorId")
                        .HasName("ix_books_author_id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ByondVersion")
                        .IsRequired()
                        .HasColumnName("byond_version")
                        .HasMaxLength(255);

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnName("cid")
                        .HasMaxLength(255);

                    b.Property<string>("Ckey")
                        .IsRequired()
                        .HasColumnName("ckey")
                        .HasMaxLength(255);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(16);

                    b.Property<DateTime>("FirstSeen")
                        .HasColumnName("first_seen");

                    b.Property<int>("Flags")
                        .HasColumnName("flags");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnName("ip")
                        .HasMaxLength(255);

                    b.Property<DateTime>("LastSeen")
                        .HasColumnName("last_seen");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnName("rank")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Registered")
                        .HasColumnName("registered");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.ToTable("players");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("End")
                        .HasColumnName("end");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnName("question")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Start")
                        .HasColumnName("start");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(16);

                    b.HasKey("Id")
                        .HasName("pk_polls");

                    b.ToTable("polls");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.PollOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("MaxValue")
                        .HasColumnName("max_value");

                    b.Property<int?>("MinValue")
                        .HasColumnName("min_value");

                    b.Property<int>("PollId")
                        .HasColumnName("poll_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("pk_poll_options");

                    b.HasIndex("PollId")
                        .HasName("ix_poll_options_poll_id");

                    b.ToTable("poll_options");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.PollTextReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("PlayerId")
                        .HasColumnName("player_id");

                    b.Property<int?>("PollId")
                        .HasColumnName("poll_id");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_poll_text_replies");

                    b.HasIndex("PlayerId")
                        .HasName("ix_poll_text_replies_player_id");

                    b.HasIndex("PollId")
                        .HasName("ix_poll_text_replies_poll_id");

                    b.ToTable("poll_text_replies");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.PollVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("OptionId")
                        .HasColumnName("option_id");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id");

                    b.Property<int>("PollId")
                        .HasColumnName("poll_id");

                    b.Property<DateTime>("Time")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_poll_votes");

                    b.HasIndex("OptionId")
                        .HasName("ix_poll_votes_option_id");

                    b.HasIndex("PlayerId")
                        .HasName("ix_poll_votes_player_id");

                    b.HasIndex("PollId")
                        .HasName("ix_poll_votes_poll_id");

                    b.ToTable("poll_votes");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.Population", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AdminCount")
                        .HasColumnName("admin_count");

                    b.Property<int>("PlayerCount")
                        .HasColumnName("player_count");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnName("server")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Time")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_populations");

                    b.ToTable("populations");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.Ban", b =>
                {
                    b.HasOne("DiscordiaHub.Management.Models.Player", "BannedBy")
                        .WithMany()
                        .HasForeignKey("BannedById")
                        .HasConstraintName("fk_bans_players_banned_by_id");

                    b.HasOne("DiscordiaHub.Management.Models.Player", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .HasConstraintName("fk_bans_players_target_id");

                    b.HasOne("DiscordiaHub.Management.Models.Player", "UnbannedBy")
                        .WithMany()
                        .HasForeignKey("UnbannedById")
                        .HasConstraintName("fk_bans_players_unbanned_by_id");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.Book", b =>
                {
                    b.HasOne("DiscordiaHub.Management.Models.Player", "PlayerAuthor")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_books_players_author_id");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.PollOption", b =>
                {
                    b.HasOne("DiscordiaHub.Management.Models.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .HasConstraintName("fk_poll_options_polls_poll_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.PollTextReply", b =>
                {
                    b.HasOne("DiscordiaHub.Management.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_poll_text_replies_players_player_id");

                    b.HasOne("DiscordiaHub.Management.Models.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .HasConstraintName("fk_poll_text_replies_polls_poll_id");
                });

            modelBuilder.Entity("DiscordiaHub.Management.Models.PollVote", b =>
                {
                    b.HasOne("DiscordiaHub.Management.Models.PollOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .HasConstraintName("fk_poll_votes_poll_options_option_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiscordiaHub.Management.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_poll_votes_players_player_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiscordiaHub.Management.Models.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .HasConstraintName("fk_poll_votes_polls_poll_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
